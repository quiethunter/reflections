How did viewing a diff between two versions of a file help you see the bug that was introduced?
The diff was able to get rid of all the 
extraneous similarities and focus
my attention on the differences, since that 
is where the error will be found.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Having the entire history will show how the program evolved over time.
This may provide some insight into program evolution.
Patterns in how programs develop may become apparent,
such that the programmer may begin to see certain program 
features as necessary or inevitable and build then
in from the beginning.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
The good:
Only usable code is committed.
User has more control over versioning.
Versions are created at logical points.
The number of versions is controlled.

The bad:
Responsibility is on the user to commit their work.
 
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
The multiple file commit clearly is a way
to track changes to multiple files,
which is necessary for a program that 
is made up of multiple files.
I can only see the single file commit as a 
limitation rather than a thoughtful choice.

How can you use the commands git log and git diff to view the history of files?
git log will show all the of the commits.
This will provide the history complete with the 
description of each change that was made.
Once the version of interest has been identified,
git diff can be used to compare two versions to 
see specifically what changed between those two versions,
thus exposing the history.

How might using version control make you more confident to make changes that could break something?
Clearly, knowing that I can easily revert to a previous version 
and compare the files, I can make changes without being overly
concerned about breaking the program.  Thus, I know I always
have a way back to where I was... 
If I used the versioning correctly that is.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to help me improve as a programmer.  I have 
many Python programs that need to be made into libraries of routines
that can be loaded and used generally.  This will significantly improve my 
work with Hydromet.  Also, i want to program larger and more complex programs.
I believe versioning will help me to do that.  Also, I want to learn Java, 
SQL and other languages.  I think Git can help me learn and develop as a 
programmer faster.